name: Build static ffmpeg

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'The release tag (e.g., v1.0.0)'
        required: true
  # push:
  # pull_request:
  
jobs:
  package-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - x86_64
          # - arm64
    env:
      ARCH: ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v5
      - name: Install dependencies
        run: |
          sudo apt-get update -y && \
          sudo apt-get install -y nasm yasm libshine-dev
      - name: Install ARM64 compiler
        if: env.ARCH == 'arm64'
        run: |
          sudo apt-get update -y && \
          sudo apt-get install -y gcc-aarch64-linux-gnu
      - name: Build
        run: ./build-linux.sh
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-linux-${{ env.ARCH }}
          path: artifacts/
  package-windows:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - x86_64
    env:
      ARCH: ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update -y && \
          sudo apt-get install -y nasm yasm mingw-w64
      - name: Build libshine for Windows
        run: |
          git clone https://github.com/toots/shine.git
          cd shine
          ./bootstrap || true   # some builds need this, ignore if missing
          ./configure --host=x86_64-w64-mingw32 --prefix=/usr/x86_64-w64-mingw32 --enable-static --disable-shared
          make -j$(nproc)
          sudo make install
          cd ..
      - name: Build
        run: ./build-windows.sh
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-windows-${{ env.ARCH }}
          path: artifacts/
  package-macos-silicon:
    runs-on: macos-latest
    strategy:
      matrix:
        # https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary#Update-the-Architecture-List-of-Custom-Makefiles
        target:
          - arm64-apple-macos11
    env:
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          brew install yasm shine pkg-config
          # Set environment variables for Homebrew paths on Apple Silicon
          echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "HOMEBREW_PREFIX=$(brew --prefix)" >> $GITHUB_ENV
      - name: Build
        run: ./build-macos.sh
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.target }}
          path: artifacts/
  package-macos-intel:
    runs-on: macos-13
    strategy:
      matrix:
        # https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary#Update-the-Architecture-List-of-Custom-Makefiles
        target:
          - x86_64-apple-macos10.9
    env:
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          brew install nasm yasm shine pkg-config
          # Set environment variables for Homebrew paths on Intel
          echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "HOMEBREW_PREFIX=$(brew --prefix)" >> $GITHUB_ENV
      - name: Build
        run: ./build-macos.sh
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.target }}
          path: artifacts/
  release:
    runs-on: ubuntu-latest
    needs:
      - package-linux
      - package-windows
      - package-macos-silicon
      - package-macos-intel
    steps:
      - uses: actions/download-artifact@v5
        with:
          path: artifacts/
      - name: Make tarballs
        run: |
          mkdir artifacts/release/
          cd artifacts/
          for dir in ffmpeg-*/ffmpeg-*
          do
            name=$(basename $dir)
            tar czf release/$name.tar.gz -C $(dirname $dir) $name
          done
          ls -l release/
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          files: artifacts/release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

